from itertools import permutations

def is_valid_solution(s, m, o, r, e, n, d, y):
    """Check if the current digit assignment is a valid solution."""
    return (1000 * s + 100 * e + 10 * n + d) + \
           (1000 * m + 100 * o + 10 * r + e) == \
           (10000 * m + 1000 * o + 100 * n + 10 * e + y)

def solve_crypt_arithmetic():
    letters = 'SENDMORY'  # Unique letters in the problem
    digits = range(10)    # Digits from 0 to 9

    # Generate all possible permutations of digits for the letters
    for perm in permutations(digits, len(letters)):
        # Create a mapping of letters to digits
        s, e, n, d, m, o, r, y = perm
        # Ensure that 'S' and 'M' are not zero (as they are the leading digits)
        if s == 0 or m == 0:
            continue
        if is_valid_solution(s, m, o, r, e, n, d, y):
            print(f"SEND = {1000 * s + 100 * e + 10 * n + d}")
            print(f"MORE = {1000 * m + 100 * o + 10 * r + e}")
            print(f"MONEY = {10000 * m + 1000 * o + 100 * n + 10 * e + y}")
            print("Solution found:")
            print(f"S = {s}, E = {e}, N = {n}, D = {d}, M = {m}, O = {o}, R = {r}, Y = {y}")
            return

    print("No solution found.")

if _name_ == "_main_":
    solve_crypt_arithmetic()
